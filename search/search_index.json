{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to documentation for Baj's Tower Defense Framework!</p>"},{"location":"#project-description","title":"Project Description","text":"<p>Baj's Tower Defense Framework (jTDF) is an open source framework, designed to make creation of Tower Defense games on Roblox easier.</p> <p>jTDF handles:</p> <ul> <li> <p>Towers: stats, placement, upgrades, attacks, animations, stat effects</p> </li> <li> <p>Enemies: health, speed, animations</p> </li> <li> <p>Paths: normal, bezier, split, elevated</p> </li> <li> <p>API endpoints: events, stat checks</p> </li> </ul> <p>what jTDF does NOT handle:</p> <ul> <li> <p>Wave functionality</p> </li> <li> <p>UI</p> </li> </ul>"},{"location":"#why-choose-us","title":"Why choose us?","text":""},{"location":"#ease-of-use","title":"Ease of use","text":"<p>When trying to learn new frameworks, beginner developers often get confused, frustrated, and don't understand how to create exactly what they want. jTDF solves that by providing a comprehensible documentation with code examples, and keeping functions clean and understandable. No more having to provide 15 arguments to place a single tower!</p>"},{"location":"#performance","title":"Performance","text":"<p>jTDF optimizes all internal heavy tasks, without restricting developer freedom. Math and checks happen on server, models and animations are sent to client.</p>"},{"location":"#customization","title":"Customization","text":"<p>All functions and data structures are built in a way which allows for their dynamic modification. Don't want all those extra features? Built-in functions are plenty, simple, and provide all the stuff a Tower Defense game needs.</p>"},{"location":"#security","title":"Security","text":"<p>Client event data is checked for consistency and verified thoroughly before taking effect.</p>"},{"location":"#installation-and-usage-guide","title":"Installation and usage guide","text":"<p>TBD</p>"},{"location":"#games-using-jtdf","title":"Games using jTDF","text":"<p>If your game uses jTDF and you want to be added to this board, you can dm me (@bajsucks) or ping me on the jTDF community server.</p>"},{"location":"Path%20Builder/","title":"Path Builder","text":"<p>TBD </p>"},{"location":"Usage/","title":"Installation and usage","text":"<p>TBD</p>"},{"location":"jTDF/","title":"jTDF","text":"<p>Tip</p> <p>If a type begins with \"C\", it's contents cannot be changed at runtime.</p>"},{"location":"jTDF/#types","title":"Types","text":""},{"location":"jTDF/#ctower","title":"CTower","text":"<p>Warning</p> <p>Objects of this type are read-only. Use the constructor</p> <pre><code>{\n    [\"Name\"]: string, -- Visual name of the tower. Not used by jTDF\n    [\"Model\"]: Model, -- Model that will be used when the unit is summoned\n    [\"Upgrades\"]: { -- Upgrades of the unit; When spawned, unit will have level 1\n        [number]: CTowerStats -- Stats that the unit will have when it reaches that upgrade\n    }\n}\n</code></pre>"},{"location":"jTDF/#ctowerstats","title":"CTowerStats","text":"<p>Warning</p> <p>Objects of this type are read-only. Use the constructor</p> <pre><code>{\n    [\"Cost\"]: number, -- Cost of the tower\n    [\"Range\"]: number?, -- Range of the tower, in studs\n    [\"FireFunction\"]: (self:Radius, Unit:Unit, Targets: {Enemy}) -&gt; (),\n    --[[    \n            Function that fires at enemies. Here you damage the enemies and apply cooldowns. This will be the main source of logic for your tower.\n            It would also make sense to fire Unit.Shot signal here, if you're using it.\n            NOTE: Sometimes, when a lot of towers fire at the same enemy and it dies, it will disappear from Targets,\n            and units with MaxLockedTargets = 1 will still call the fire function.\n            Thus, it is recommended to use for loops to damage enemies instead of directly referencing Targets[1],\n            even for towers that can only damage a single enemy at a time.\n    ]]\n    [\"CheckFunction\"]: (self:Unit) -&gt; boolean,\n    --[[\n            Function that checks if the tower is ready to fire. Return true if tower is ready, and false if it's not.\n    ]]\n    [\"RadiusConfig\"]: { -- Configuration for the radius that the tower will use\n        [\"CanLock\"]: boolean, -- Whether the tower locks onto enemies, or grabs the first enemy in it's radius. True for lock, false for first enemy.\n        [\"MaxLockedTargets\"]: number -- Maximum amount of targets a tower can have. Applies to both lockable and not lockable towers, despite the name.\n    }\n}\n</code></pre>"},{"location":"jTDF/#cenemy","title":"CEnemy","text":"<p>Warning</p> <p>Objects of this type are read-only. Use the constructor</p> <pre><code>{\n    [\"Name\"]: string, -- Visual name of the enemy. Not used by jTDF\n    [\"BaseHealth\"]: number, -- Health that the enemy has when it spawns\n    [\"BaseSpeed\"]: number, -- Speed that the enemy has when it spawns\n    [\"Model\"]: Model -- Model that will be used when the enemy spawns\n}\n</code></pre>"},{"location":"jTDF/#unit","title":"Unit","text":"<p>Note</p> <p>You can add new indecies to this object if needed</p> <pre><code>{\n    [\"CurUpgrade\"]: number, -- Current upgrade of the tower. Defaults to 1\n    [\"CurStats\"]: CTowerStats, -- Current stats used by the tower. Not recommended to change manually. Instead, use StatEffects to change stats\n    [\"CTowerID\"]: string, -- CTower index used by the tower. Don't change\n    [\"TowerID\"]: string, -- Unique ID that this unit has. You can use it to refer to jTDF.ActiveUnits, if such need is present\n    [\"Position\"]: vector, -- Position of the unit. Note that it's a vector, not Vector3\n    [\"StatusEffects\"]: {[string]: thread|boolean}, -- Active StatusEffects of this unit. Not recommended to write manually\n    [\"Owner\"]: number, -- UserID of the player that placed that tower. You can manually set this value to nil in case where a neutral tower is needed\n    [\"Radius\"]: Radius -- Radius that the unit uses\n}\n</code></pre>"},{"location":"jTDF/#enemy","title":"Enemy","text":"<p>Note</p> <p>You can add new indecies to this object if needed</p> <pre><code>{\n    [\"CEnemyID\"]: string, -- CEnemy index used by the enemy. Don't change\n    [\"Speed\"]: number, -- Speed of the enemy, in studs/s. Defaults to CEnemy.BaseSpeed\n    [\"Health\"]: number, -- Current health of the enemy. When it reaches 0, if DestroyOnDeath is true, Enemy:Destroy() will be called. Defaults to CEnemy.BaseHealth\n    [\"EnemyID\"]: string, -- Unique ID that this enemy has. You can use it to refer to jTDF.ActiveEnemies, if such need is present\n    [\"CurrentPath\"]: Attachment, -- Path attachment that the enemy has already passed\n    [\"NextPath\"]: Attachment, -- Path attachment that the enemy is currently travelling to\n    [\"StartTime\"]: number, -- Time passed since CurrentPath has changed. Used for enemy position calculation\n    [\"DestroyOnDeath\"]: boolean, -- Whether :Destroy() will be called when health reaches 0\n    [\"LastHit\"]: Unit?, -- Last unit that has hit the enemy\n    [\"GotDamaged\"]: Signal &lt;&gt;, -- Fires when the enemy is damaged.\n    [\"StatsChanged\"]: Signal &lt;&gt;, -- todo\n    [\"Destroying\"]: Signal &lt;&gt; -- Fires when :Destroy() is called on the enemy, 1 frame before it expires\n}\n</code></pre>"},{"location":"jTDF/#radius","title":"Radius","text":"<p>Note</p> <p>You can add new indecies to this object if needed</p> <pre><code>{\n    [\"RadiusID\"]: string, -- Unique ID that this radius has. You can use it to refer to jTDF.ActiveRadii, if such need is present\n    [\"TowerID\"]: string?, -- Unique ID of the unit that this radius is bound to, if any\n    [\"LastThreats\"]: {Enemy}, -- Enemies in this radius since the last frame\n    [\"LastClose\"]: {Enemy}, -- Enemies that are within 5 studs from the border of this radius. Threats are not included in this table.\n    [\"Size\"]: number, -- Size of this radius in studs\n    [\"LockedTargets\"]: {[EnemyID]: Enemy}, -- Dictionary of enemies that this radius is currently locked onto\n    [\"CanLock\"]: boolean, -- Whether this radius locks onto enemies, or grabs the threat with best progress. True for lock, false for first enemy.\n    [\"MaxLockedTargets\"]: number, -- Maximum amount of targets this radius can have. Applies to both lockable and not lockable radii, despite the name.\n    [\"Position\"]: Vector2 -- Position of this radius, excluding height\n}\n</code></pre>"},{"location":"jTDF/#events","title":"Events","text":""},{"location":"jTDF/#unitplaced","title":".UnitPlaced","text":"<p><pre><code>-&gt; (Unit: Unit, Position: Vector3)\n</code></pre> Fires when a new unit is created</p>"},{"location":"jTDF/#unitdestroying","title":".UnitDestroying","text":"<p><pre><code>-&gt; (Unit: Unit)\n</code></pre> Fires when <code>:Destroy()</code> is called on any unit, 1 frame before it expires</p>"},{"location":"jTDF/#unitshot","title":".UnitShot","text":"<p><pre><code>-&gt; (Unit: Unit, Targets: {EnemyID})\n</code></pre> Fires when a unit calls its FireFunction</p>"},{"location":"jTDF/#enemykilled","title":".EnemyKilled","text":"<p><pre><code>-&gt; (Enemy: Enemy)\n</code></pre> Fires when enemy's health drops to 0, before <code>:Destroy()</code> is called</p>"},{"location":"jTDF/#enemyspawned","title":".EnemySpawned","text":"<p><pre><code>-&gt; (Enemy: Enemy)\n</code></pre> Fires when a new enemy is created</p>"},{"location":"jTDF/#enemyupdated","title":".EnemyUpdated","text":"<p><pre><code>-&gt; (Enemy: Enemy)\n</code></pre> Fires when an enemy's stats change (e.g. Speed)</p>"},{"location":"jTDF/#newradius","title":".NewRadius","text":"<p><pre><code>-&gt; (Radius: Radius)\n</code></pre> Fires when a new radius is created</p>"},{"location":"jTDF/#radiusdestroyed","title":".RadiusDestroyed","text":"<p><pre><code>-&gt; (Radius: Radius)\n</code></pre> Fires when <code>:Destroy()</code> is called on this radius</p>"},{"location":"jTDF/#unit_1","title":"Unit","text":""},{"location":"jTDF/#functions","title":"Functions","text":""},{"location":"jTDF/#define","title":".Define","text":"<p><pre><code>(ID: string?, CTower: CTower|{[CTowerID]: CTower})\n</code></pre> Defines a new CTower. ID is not used when CTower is a list</p>"},{"location":"jTDF/#new","title":".new","text":"<p><pre><code>(Player: Player, CTowerID: string, Position: Vector3|vector): Unit\n</code></pre> Creates a new unit object. If it's CTower is not yet defined, an error will be thrown</p> <p>Note</p> <p>This function's argument types are protected. If any of the arguments has an invalid type, the function will error</p>"},{"location":"jTDF/#destroy","title":":Destroy","text":"<pre><code>()\n</code></pre> <p>Destroys this unit object.</p> <p><code>Unit.Destroying</code> and <code>jTDF.Destroying</code> signals are called 1 frame before this unit is destroyed</p>"},{"location":"jTDF/#signals","title":"Signals","text":""},{"location":"jTDF/#shot","title":".Shot","text":"<p><pre><code>-&gt; (...)\n</code></pre> Not used by jTDF. You can use this signal if needed</p>"},{"location":"jTDF/#upgraded","title":".Upgraded","text":"<pre><code>-&gt; (CurUpgrade: number)\n</code></pre> <p>Fires when this unit is upgraded</p>"},{"location":"jTDF/#statschanged","title":".StatsChanged","text":"<pre><code>-&gt; ()\n</code></pre> <p>Fires when this unit's stats change</p>"},{"location":"jTDF/#destroying","title":".Destroying","text":"<p><pre><code>-&gt; ()\n</code></pre> Fires when <code>:Destroy()</code> is called on this unit, 1 frame before it expires</p>"},{"location":"jTDF/#enemy_1","title":"Enemy","text":""},{"location":"jTDF/#functions_1","title":"Functions","text":""},{"location":"jTDF/#define_1","title":".Define","text":"<p><pre><code>(ID:string?, CEnemy:CEnemy|{[string]: CEnemy})\n</code></pre> Defines a new CEnemy. ID is not used when CEnemy is a list</p>"},{"location":"jTDF/#new_1","title":".new","text":"<p><pre><code>(CEnemyID: string, Position: Vector3|vector): Enemy\n</code></pre> Creates a new enemy object. If it's CEnemy is not yet defined, an error will be thrown.</p> <p>Note</p> <p>This function's argument types are protected. If any of the arguments has an invalid type, the function will error</p>"},{"location":"jTDF/#destroy_1","title":":Destroy","text":"<pre><code>()\n</code></pre> <p>Destroys the enemy object.</p> <p><code>Enemy.Destroying</code> and <code>jTDF.EnemyKilled</code> signals are called 1 frame before this enemy is destroyed</p>"},{"location":"jTDF/#damage","title":":Damage","text":"<pre><code>(Damage:number)\n</code></pre> <p>Damages this enemy</p>"},{"location":"jTDF/#signals_1","title":"Signals","text":""},{"location":"jTDF/#destroying_1","title":".Destroying","text":"<p><pre><code>-&gt; ()\n</code></pre> Fires when <code>:Destroy()</code> is called on this enemy, 1 frame before it expires</p>"},{"location":"jTDF/#gotdamaged","title":".GotDamaged","text":"<p><pre><code>-&gt; ()\n</code></pre> Fires when this enemy is damaged</p>"},{"location":"jTDF/#statschanged_1","title":".StatsChanged","text":"<p><pre><code>-&gt; ()\n</code></pre> Fires when this enemy's CurStats are changed</p>"},{"location":"jTDF/#radius_1","title":"Radius","text":""},{"location":"jTDF/#functions_2","title":"Functions","text":""},{"location":"jTDF/#new_2","title":".new","text":"<p><pre><code>(InitPos:Vector2|vector, Size:number, Config:{}): Radius\n</code></pre> Creates a new radius</p>"},{"location":"jTDF/#fromid","title":".FromID","text":"<p><pre><code>(ID:string): Radius\n</code></pre> Returns a radius from its ID, if such a radius exists</p>"},{"location":"jTDF/#resize","title":":Resize","text":"<p><pre><code>(newRadius:number)\n</code></pre> Changes size of this radius. Currently, it just changes the Radius.Size property</p>"},{"location":"jTDF/#destroy_2","title":":Destroy","text":"<p><pre><code>()\n</code></pre> Destroys this radius object</p>"},{"location":"jTDF/#signals_2","title":"Signals","text":""},{"location":"jTDF/#destroying_2","title":".Destroying","text":"<pre><code>-&gt; ()\n</code></pre> <p>Fires 1 frame before this radius is destroyed</p>"}]}